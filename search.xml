<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>ZAB协议</title>
    <url>/2024/10/08/ZAB%E5%8D%8F%E8%AE%AE/</url>
    <content><![CDATA[<h3 id="什么是ZAB协议？"><a href="#什么是ZAB协议？" class="headerlink" title="什么是ZAB协议？"></a>什么是ZAB协议？</h3><p>　ZAB（ZooKeeper Atomic Broadcast）协议是为分布式协调服务 Zookeeper 专门设计的一种支持崩溃恢复的原子广播协议，实现分布式数据一致性。只有一台客户端（Leader）负责处理外部的写事务请求，然后 Leader 客户端将数据同步到其他Follower节点。即Zookeeper只有一个Leader可以发起提案（Proposal）。</p>
<h3 id="崩溃恢复和消息广播"><a href="#崩溃恢复和消息广播" class="headerlink" title="崩溃恢复和消息广播"></a>崩溃恢复和消息广播</h3><h4 id="消息广播"><a href="#消息广播" class="headerlink" title="消息广播"></a>消息广播</h4><ol>
<li>Leader节点处理所有事务请求，将客户端请求转换为提案（Proposal），并广播给所有Follower节点。</li>
<li>Leader等待大部分Follower节点反馈后，再次广播Commit信息，确认之前的Proposal提交。</li>
<li>Zab协议的核心，就是只要有一台服务器提交了Proposal，就要确保所有的服务器最终都能正确提交Proposal。</li>
</ol>
<p><img src="/../img/articles/ZAB%E5%8D%8F%E8%AE%AE.png" alt="ZAB协议"></p>
<h4 id="崩溃恢复"><a href="#崩溃恢复" class="headerlink" title="崩溃恢复"></a>崩溃恢复</h4><p><strong>什么情况下会进入崩溃恢复模式</strong></p>
<ul>
<li>当服务器启动时</li>
<li>当leader 服务器出现网络中断，崩溃或者重启的情况</li>
<li>当集群中已经不存在过半的服务器与Leader服务器保持正常通信。</li>
</ul>
<p><strong>特殊情况下会发生的情况</strong></p>
<p><strong>一、已经被处理的事务请求不能丢失：</strong><br>　当Leader在收到大多数Follower的确认后，广播Commit命令并本地执行，但如果在Follower收到Commit之前Leader宕机，可能导致部分Follower没有执行该事务。</p>
<p>解决方案：</p>
<ul>
<li>选举具有最大zxid（提案最大值）的节点作为新的Leader，因为它保存了所有已提交的Proposal。</li>
<li>新的Leader处理自己日志中的未提交事务，并将这些Proposal发送给Follower，确保所有Follower都同步执行。</li>
</ul>
<p><strong>二、未被处理的事务请求不能再次出现：</strong><br>　当Leader生成Proposal后宕机，部分Follower没有收到该Proposal，重新选举后，这些Proposal会被跳过。如果宕机的旧Leader重启并成为Follower，它的状态可能和系统不一致。</p>
<p>解决方案：</p>
<ul>
<li>通过zxid的设计，旧的Leader重启后不会被选为Leader，因为它的zxid小于新的Leader。</li>
<li>当旧Leader作为Follower加入时，新的Leader会指示它清除未提交的旧事务，避免状态不一致。</li>
</ul>
<h3 id="事务编号Zxid"><a href="#事务编号Zxid" class="headerlink" title="事务编号Zxid"></a>事务编号Zxid</h3><p><strong>zxid定义</strong>：<br>　在ZAB协议中，<code>zxid</code>是一个64位的事务编号，用于唯一标识每个事务。它确保了系统中事务的顺序和一致性。</p>
<p><strong>zxid的组成</strong>：<br>　<code>zxid</code>由两部分构成：</p>
<ol>
<li><strong>高32位</strong>：表示<code>epoch编号</code>，用于标识当前Leader的任期。每次选举产生新的Leader时，<code>epoch</code>值会加1，确保旧的Leader无法继续影响系统。</li>
<li><strong>低32位</strong>：表示<code>事务计数器</code>，用于标识Leader在同一任期内生成的事务数量。Leader每处理一个新的客户端请求，该计数器都会自增1。</li>
</ol>
<p><strong>epoch编号的作用</strong>：<br>　<code>epoch</code>编号用于区别不同的Leader任期。每次选举新的Leader时，新Leader会根据自己本地最大事务的<code>zxid</code>，解析出当前的<code>epoch</code>编号，并在此基础上加1。Follower只服从<code>epoch</code>最大的Leader，确保旧的Leader不会影响新任期的操作。</p>
<p><strong>zxid的增长机制</strong>：</p>
<ul>
<li>新选举出的Leader会将自身日志中最大的<code>zxid</code>解析出<code>epoch</code>编号，加1后作为新的<code>epoch</code>。</li>
<li>事务计数器（低32位）归零，并从0开始对每个新事务递增。</li>
</ul>
<p><strong>zxid的作用</strong>：</p>
<ol>
<li><strong>事务顺序控制</strong>：<code>zxid</code>保证了每个事务在系统中的全局顺序。</li>
<li><strong>Leader合法性判断</strong>：通过<code>epoch</code>编号，Follower可以识别出当前的合法Leader，确保系统的稳定性和一致性。</li>
</ol>
<h3 id="Leader选举"><a href="#Leader选举" class="headerlink" title="Leader选举"></a>Leader选举</h3><h4 id="节点状态"><a href="#节点状态" class="headerlink" title="节点状态"></a>节点状态</h4><ol>
<li><p>Looking &#x2F;Election：系统刚启动时或者Leader崩溃后正处于选举状态</p>
</li>
<li><p>Following ：Follower节点所处的状态，Follower与Leader处于数据同步阶段；</p>
</li>
<li><p>Leading ：Leader所处状态，当前集群中有一个Leader为主进程；</p>
</li>
</ol>
<p><img src="/../img/articles/ZAB%E5%8D%8F%E8%AE%AE-%E8%8A%82%E7%82%B9%E7%8A%B6%E6%80%81.png" alt="ZAB协议-节点状态"></p>
<h4 id="启动时期选举"><a href="#启动时期选举" class="headerlink" title="启动时期选举"></a>启动时期选举</h4><ul>
<li>每个服务器发出一张选票，第一轮都投给自己。</li>
<li>接受来自各个服务器的选票。</li>
<li>处理选票，首先检查<code>zxid</code>（事务ID），如果相同则比较<code>myid</code>（服务器ID）。</li>
<li>统计选票，判断是否已经有过半的机器接收到相同的选票信息。</li>
<li>如果有过半机器接收相同的选票信息，则改变服务器状态：<code>Leader -&gt; Leading</code>，<code>Follower -&gt; Following</code></li>
</ul>
<h4 id="服务运行时选举"><a href="#服务运行时选举" class="headerlink" title="服务运行时选举"></a>服务运行时选举</h4><ul>
<li>当Leader挂掉后，剩下的Follower都变成<code>Looking</code>状态，进入Leader选举过程。</li>
<li>每个服务器发出一张选票，第一轮都投给自己，然后将自己的选票发送给所有机器。</li>
<li>接收选票，并进行选票处理，与启动选举相同。</li>
<li>统计选票，与启动选举相同。</li>
<li>如果有过半机器接收相同的选票信息，则改变服务器状态，与启动选举相同。</li>
</ul>
<h4 id="FastLeaderElection算法"><a href="#FastLeaderElection算法" class="headerlink" title="FastLeaderElection算法"></a>FastLeaderElection算法</h4><p><strong>基本信息</strong>：</p>
<ul>
<li><strong>投票信息</strong>：包含两个重要元素：服务器唯一标识（<code>sid</code>）和事务ID（<code>zxid</code>）。</li>
<li><strong>逻辑时钟</strong>：用来标识选举轮次，重启时为0，选举时加1。</li>
</ul>
<p><strong>选举状态</strong>：</p>
<ul>
<li>初始状态为<strong>Looking</strong>，表示系统正在进行Leader选举。</li>
</ul>
<p><strong>选举过程</strong>：</p>
<ul>
<li>每台机器在第一次投票时将自己作为被推举对象，广播选票（包含<code>clock</code>、状态、<code>zxid</code>和<code>myid</code>）。</li>
<li>收到其他节点的投票后：<ul>
<li>如果接收到的<code>clock</code>大于自己的，更新自己的<code>clock</code>。</li>
<li>如果接收到的<code>zxid</code>大于自己的，认可该节点的投票，更新选票为该节点。</li>
<li>如果<code>zxid</code>小于自己的，保持原选票。</li>
<li>如果<code>zxid</code>相等，比较<code>myid</code>，选择较大的节点。</li>
</ul>
</li>
</ul>
<p><strong>重新发出选票</strong>：</p>
<ul>
<li>经过第二轮投票后，各节点统计收到的投票，如果某个节点收到超过半数的相同投票，该节点即为新的Leader。</li>
</ul>
<p><strong>选举结果</strong>：</p>
<ul>
<li>通常数据更新较新的节点更有可能成为Leader，因为它能更好地保证数据的一致性和恢复。</li>
<li>若多个节点有相同的<code>zxid</code>，则<code>myid</code>较大的节点优先成为Leader。</li>
</ul>
]]></content>
      <tags>
        <tag>Zookeeper 协议</tag>
      </tags>
  </entry>
</search>
